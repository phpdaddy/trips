import Head from 'next/head'
import Image from 'next/image'
import styles from '../../../styles/TripEdit.module.scss'
import {Trip} from '../../../types'
import LeftNavBar from '../../../components/LeftNavbar'
import MobileHeader from '../../../components/MobileHeader'
import Link from "next/link";
import moment from "moment";

const token = 'eGFBGlRBZB5ics8E2WzZ';

type Props = {
    trips: Trip[],
    trip: Trip
}

export default function Id({trips, trip}: Props) {

    const tripsList = trips.map((t, index) => {
        const startDate = moment(t.start_date, "DD.MM.YYYY").toDate();

        return <div className={styles.trip} key={index}>
            <div className={styles.tripDetails}>
                <div className={styles.countryContainer}>
                    <div className={styles.countryLogo}>
                        <Image src="/austria.svg" alt="austria" width={22} height={22}/>

                    </div>
                    <div className={styles.country}>
                        {t.address.country}
                    </div>
                </div>
                <div>
                    <span className={styles.sectionTitle}>Company</span>
                    <div className={styles.company}>
                        {t.company_name}
                    </div>

                    <div className={styles.address}>
                        {t.address.street}
                    </div>
                    <span className={styles.sectionTitle}>Date</span>
                    <div className={styles.date}>
                        {t.start_date} - {t.end_date}
                    </div>
                </div>
            </div>
            <div className={styles.buttons}>
                <Link href={`/trips/trip-edit/${t.id}`}>

                    <button className={styles.okBtn}>
                        {(startDate <= new Date()) && <>View trip
                            <Image src="/arrowRight.svg" alt="arrowRight" width={10} height={16}/>
                        </>}
                        {(startDate > new Date()) && <>
                            Edit trip
                            <Image src="/edit.svg" alt="edit" width={10} height={16}/></>
                        }
                    </button>


                </Link>
            </div>
        </div>
    });


    const startDate = moment(trip.start_date, "DD.MM.YYYY").toDate();
    const disabled = startDate <= new Date();

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={styles.main}>
                <LeftNavBar/>

                <div className={styles.content}>
                    <MobileHeader label="View trip"/>
                    <div className={styles.header}>
                        <h1 className={styles.title}>
                            {disabled ? 'View trip' : 'Edit trip'}

                        </h1>
                    </div>

                    <div className={styles.formFragment}>
                        <span>
                            Where do you want to go
                        </span>
                        <input disabled={disabled} value={trip.address.country}/>

                    </div>

                    <div className={styles.formFragment}>
                        <span>
                            Start date
                        </span>
                        <input disabled={disabled} value={trip.start_date}/>

                        <span>
                            End date
                        </span>
                        <input disabled={disabled} value={trip.end_date}/>
                    </div>

                    <div className={styles.formFragment}>
                        <span>
                            Company name

                        </span>
                        <input disabled={disabled} value={trip.company_name}/>

                        <span>
                            City
                        </span>
                        <input disabled={disabled} value={trip.address.city}/>


                        <span>
                            Street
                        </span>
                        <input disabled={disabled} value={trip.address.street}/>

                        <span>
                            Street number
                        </span>
                        <input disabled={disabled} value={trip.address.street_num}/>

                        <span>
                            Zip code

                        </span>
                        <input disabled={disabled} value={trip.address.zip}/>

                    </div>


                    <div className={styles.formFragment}>
                        <span>
                            Have you been recently tested for COVID-19?
                        </span>
                        <input disabled={disabled} value={trip.covid}/>

                        <span>
                            Date of receiving test results
                        </span>
                        <input disabled={disabled} value={trip.covid_test_date}/>


                    </div>
                    {!disabled &&
                    <button className={styles.saveBtn}>
                        Save  <Image src="/check.svg" alt="check" width={10} height={16}/>
                    </button>
                    }
                </div>
                <div className={styles.tripsList}>
                    <h1 className={styles.title}>
                        Trips

                    </h1>
                    {tripsList}
                </div>

            </main>

        </div>
    )
}

export async function getStaticProps(context) {
    const res1 = await fetch('https://task-devel.cleevio-vercel.vercel.app/api/trip', {
        headers: new Headers({
            'Authorization': 'Bearer ' + token,
        }),
    })
    const trips = await res1.json();

    const res2 = await fetch('https://task-devel.cleevio-vercel.vercel.app/api/trip/' + context.params.id, {
        headers: new Headers({
            'Authorization': 'Bearer ' + token,
        }),
    })
    const trip = await res2.json();

    return {
        props: {
            trips,
            trip,
        },
    }
}

export async function getStaticPaths() {
    const res = await fetch('https://task-devel.cleevio-vercel.vercel.app/api/trip', {
        headers: new Headers({
            'Authorization': 'Bearer ' + token,
        }),
    })
    const trips = await res.json()
    const paths = trips.map(t => ({
        params: {
            id: t.id
        }
    }));

    return {
        paths,
        fallback: false
    }
}